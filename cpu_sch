
#include <stdio.h>
  #include <stdlib.h>
    #include <string.h>

      #define MAX_PROCESSES 100
      #define MAX_RAM 2048 // Maximum RAM size in MB
      #define CPU_1 512 // Memory allocated  CPU-1
      #define CPU_2 1536 // Memory allocated  CPU-2
      #define HIGH_PRIORITY_QUEUE 1
      #define MEDIUM_PRIORITY_QUEUE 2
      #define LOW_PRIORITY_QUEUE 3
      #define RR_QUANTUM_MEDIUM 8 // Quantum time for medium priority Round Robin
      #define RR_QUANTUM_LOW 16   // Quantum time for low priority Round Robin

      struct Process {
        int process_number;
        int arrival_time;
        int priority;
        int burst_time;
        int ram_required;
        int cpu_rate;
      };

      // Function to read input file and parse process data
      int parse_input_file(char *filename, struct Process processes[]) {
        FILE *file = fopen(filename, "r");
        if (file == NULL) {
          printf("Error: Unable to open input file.\n");
          return 0;
        }

        int num_processes = 0;
        char line[100];
        while (fgets(line, sizeof(line), file) != NULL) {
          // Parse process data from each line
          char *token;
          token = strtok(line, ",");
          processes[num_processes].process_number = atoi(&token[1]);
          token = strtok(NULL, ",");
          processes[num_processes].arrival_time = atoi(token);
          token = strtok(NULL, ",");
          processes[num_processes].priority = atoi(token);
          token = strtok(NULL, ",");
          processes[num_processes].burst_time = atoi(token);
          token = strtok(NULL, ",");
          processes[num_processes].ram_required = atoi(token);
          token = strtok(NULL, ",");
          processes[num_processes].cpu_rate = atoi(token);
          num_processes++;
        }

        fclose(file);
        return num_processes;
      }

      // Function to perform resource check
      int resource_check(struct Process process) {
        int CPU = (process.priority == 0) ? CPU_1 : CPU_2;
        if (process.ram_required <= CPU) {
          return 1; // Sufficient resources available
        } else {
          printf("Insufficient resources available for process %d.\n", process.process_number);
          return 0; // Insufficient resources available
        }
      }

      // Function to sort processes based on arrival time using FCFS algorithm
      void FCFS_sort_processes(struct Process processes[], int num_processes) {
      int i, j;
      struct Process key;

      for (i = 1; i < num_processes; i++) {
        key = processes[i];
        j = i - 1;

        while (j >= 0 && processes[j].arrival_time > key.arrival_time) {
            processes[j + 1] = processes[j];
            j = j - 1;
        }
        processes[j + 1] = key;
        }
      }
 
      // Function to assign processes to CPU-1 using FCFS algorithm
      void assign_to_cpu1(struct Process process, FILE *output_file) {
        if (process.priority == 0) {
          fprintf(output_file, "Process %d is assigned to CPU-1.\n", process.process_number);
        }
      }

      int main(int argc, char *argv[]) {
          return 0;

        }
